{"remainingRequest":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/src/components/ScrollView.vue?vue&type=style&index=0&scope=true&lang=css&","dependencies":[{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/src/components/ScrollView.vue","mtime":1584888776034},{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/boduoduo/Desktop/学习/前端学习/Vue学习/vueMusic/Neteasemusic/mymusic/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojd3JhcHBlciB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["ScrollView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA","file":"ScrollView.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"wrapper\" ref=\"wrapper\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport IScroll from \"iscroll/build/iscroll-probe\";\nexport default {\n  name: \"ScrollView\",\n  mounted() {\n    this.iscroll = new IScroll(this.$refs.wrapper, {\n      mouseWheel: true,\n      scrollbars: true,\n      // 解决拖拽卡顿的问题\n      scrollX: false,\n      scrollY: true,\n      disablePointer: true,\n      disableTouch: false,\n      disableMouse: true\n    });\n    setTimeout(() => {\n      this.iscroll.refresh();\n    }, 5000);\n    // 创建观察者\n    let observer = new MutationObserver((mutationList, observer) => {\n      this.iscroll.refresh();\n    });\n    // 高速观察者观察哪些对象\n    let config = {\n      childList: true, // 观察目标子节点的变化，添加或者删除\n      subtree: true, // 默认为false，设置为true， 可以观察后代节点\n      attributeFilter: [\"height\", \"offsetHeight\"] //观察特定属性\n    };\n    // 监听那个节点\n    observer.observe(this.$refs.wrapper, config);\n  }\n};\n</script>\n\n<style scope>\n#wrapper {\n  width: 100%;\n  height: 100%;\n}\n</style>"]}]}